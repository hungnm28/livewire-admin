<?php

namespace Modules\DUMP_MY_MODULE_NAME\Livewire\Permissions;

use App\Models\Permission;
use Hungnm28\LivewireAdmin\Facades\RouteSupport;
use Hungnm28\LivewireAdmin\Traits\WithFormTrait;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Support\Str;
use Nwidart\Modules\Facades\Module;

trait FormTrait
{
    use WithFormTrait;
    use AuthorizesRequests;

    public $record_id, $name, $label, $parent_id, $type = 'method', $methods = [];

    protected function rules()
    {
        $rules = [
            "name" => "string|required|unique:permissions,name,$this->record_id",
            "label" => "",
            "parent_id" => "",
            "type" => ""
        ];

        return $rules;
    }

    private function setFields()
    {
        $data = Permission::with("children")->find($this->record_id);
        $this->name = data_get($data, "name");
        $this->label = data_get($data, "label");
        $this->parent_id = data_get($data, "parent_id", 0);
        $this->type = data_get($data, "type", 'page');
        if (!empty($data->children)) {
            $this->methods = $data->children->pluck("label", "name");
        }
    }

    private function getTypes()
    {
        return ["page" => "Page", "method" => "Method"];
    }

    private function getSuggest()
    {
        if ($this->type == "method") {
            $methods = [];
            $pre = "";
            $parent = Permission::find($this->parent_id);
            if ($parent) {
                $pre = $parent->name;
            }
            foreach (['create', 'edit', 'delete', 'show'] as $item) {
                $methods[] = "$pre.$item";
            }
            $allPermissions = Permission::get()->pluck("name")->toArray();
            $methods = array_diff($methods, $allPermissions);
            return $methods;
        }
        return $this->getRoutes();
    }

    private function getRoutes()
    {
        $rt = [];
        $routes = RouteSupport::getNames();
        $allPermissions = Permission::get()->pluck("name")->toArray();
        $routes = array_diff($routes, $allPermissions);
        foreach (Module::all() as $mod) {
            $modName = $mod->getLowerName();
            foreach ($routes as $route) {
                if (Str::is($modName . ".*", $route)) {
                    $rt[] = $route;
                }
            }
        }

        return $rt;
    }

    private function getParents()
    {
        return $this->rtGetParent();
    }

    private function rtGetParent($parent_id = 0, $data = [0 => 'ROOT'], $level = 0)
    {
        return Permission::whereType('page')->whereParentId($parent_id)->get()->reduce(function ($rt, $item) use ($level) {

            $rt[$item->id] = Str::repeat("-- ", $level) . $item->label . " ($item->name)";
            $rt = $this->rtGetParent($item->id, $rt, ++$level);
            return $rt;
        }, $data);
    }

    private function getFieldDatas()
    {
        $data = [
            "name" => $this->name,
            "label" => $this->label,
            "parent_id" => $this->parent_id,
            "type" => $this->type
        ];

        return $data;
    }

}
